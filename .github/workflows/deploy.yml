name: Deploy WordPress to Server

# Controls when the action will run.
# Triggers the workflow on push events to the 'main' branch.
on:
  push:
    branches:
      - main # Adjust this to your production/deployment branch (e.g., master, production)

jobs:
  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest # Specifies the runner environment for the job

    steps:
      # Step 1: Checkout the repository code
      # This action checks-out your repository under $GITHUB_WORKSPACE, so your workflow can access it.
      - name: Checkout code
        uses: actions/checkout@v4 # Using version 4, check for latest stable version

      # Step 2: Create .env file for server from GitHub Secrets
      # This step generates the .env file that will be deployed to the server.
      - name: Create server .env file
        env:
          # Pass all necessary secrets as environment variables to this step for safer handling
          VAR_PROD_PROJECT_NAME: ${{ secrets.PROD_PROJECT_NAME }}
          VAR_PROD_MYSQL_ROOT_PASSWORD: ${{ secrets.PROD_MYSQL_ROOT_PASSWORD }}
          VAR_PROD_MYSQL_DATABASE: ${{ secrets.PROD_MYSQL_DATABASE }}
          VAR_PROD_MYSQL_USER: ${{ secrets.PROD_MYSQL_USER }}
          VAR_PROD_MYSQL_PASSWORD: ${{ secrets.PROD_MYSQL_PASSWORD }}
          VAR_PROD_WORDPRESS_HOST_PORT: ${{ secrets.PROD_WORDPRESS_HOST_PORT }}
          VAR_PROD_WORDPRESS_TABLE_PREFIX: ${{ secrets.PROD_WORDPRESS_TABLE_PREFIX }}
          VAR_PROD_WORDPRESS_DEBUG: ${{ secrets.PROD_WORDPRESS_DEBUG }}
          VAR_PROD_WP_ENV: ${{ secrets.PROD_WP_ENV }}
          VAR_PROD_WORDPRESS_CONFIG_EXTRA: ${{ secrets.PROD_WORDPRESS_CONFIG_EXTRA }}
          # WordPress Salt secrets (GitHub secrets are named WITHOUT PROD_ prefix)
          VAR_AUTH_KEY: ${{ secrets.AUTH_KEY }}
          VAR_SECURE_AUTH_KEY: ${{ secrets.SECURE_AUTH_KEY }}
          VAR_LOGGED_IN_KEY: ${{ secrets.LOGGED_IN_KEY }}
          VAR_NONCE_KEY: ${{ secrets.NONCE_KEY }}
          VAR_AUTH_SALT: ${{ secrets.AUTH_SALT }}
          VAR_SECURE_AUTH_SALT: ${{ secrets.SECURE_AUTH_SALT }}
          VAR_LOGGED_IN_SALT: ${{ secrets.LOGGED_IN_SALT }}
          VAR_NONCE_SALT: ${{ secrets.NONCE_SALT }}
          # phpMyAdmin secrets
          VAR_PROD_PHPMYADMIN_UPLOAD_LIMIT: ${{ secrets.PROD_PHPMYADMIN_UPLOAD_LIMIT }}
          # Secrets for Nginx Proxy, Let's Encrypt, and phpMyAdmin Basic Auth
          VAR_PROD_DOMAIN_NAME: ${{ secrets.PROD_DOMAIN_NAME }}
          VAR_PROD_LETSENCRYPT_EMAIL: ${{ secrets.PROD_LETSENCRYPT_EMAIL }}
          VAR_PROD_PHPMYADMIN_AUTH_USER: ${{ secrets.PROD_PHPMYADMIN_AUTH_USER }} # For phpMyAdmin Basic Auth
          VAR_PROD_PHPMYADMIN_AUTH_PASS: ${{ secrets.PROD_PHPMYADMIN_AUTH_PASS }} # HASHED password for phpMyAdmin Basic Auth
        run: |
          echo "INFO: Creating .env file for server..."
          # Using a block to redirect all printf output to .env file
          # This .env file is created in the root of the checkout on the Actions runner
          {
            printf "PROD_PROJECT_NAME='%s'\n" "$VAR_PROD_PROJECT_NAME"
            printf "PROD_MYSQL_ROOT_PASSWORD='%s'\n" "$VAR_PROD_MYSQL_ROOT_PASSWORD"
            printf "PROD_MYSQL_DATABASE='%s'\n" "$VAR_PROD_MYSQL_DATABASE"
            printf "PROD_MYSQL_USER='%s'\n" "$VAR_PROD_MYSQL_USER"
            printf "PROD_MYSQL_PASSWORD='%s'\n" "$VAR_PROD_MYSQL_PASSWORD"
            printf "PROD_WORDPRESS_HOST_PORT='%s'\n" "$VAR_PROD_WORDPRESS_HOST_PORT"
            printf "PROD_WORDPRESS_TABLE_PREFIX='%s'\n" "$VAR_PROD_WORDPRESS_TABLE_PREFIX"
            printf "PROD_WORDPRESS_DEBUG='%s'\n" "$VAR_PROD_WORDPRESS_DEBUG"
            printf "PROD_WP_ENV='%s'\n" "$VAR_PROD_WP_ENV"
            printf "PROD_WORDPRESS_CONFIG_EXTRA=\"%s\"\n" "$VAR_PROD_WORDPRESS_CONFIG_EXTRA"
            # Writing to .env file WITH PROD_ prefix for consistency with other PROD_ variables,
            # but reading from GitHub Secrets named WITHOUT PROD_ prefix for salts.
            printf "PROD_AUTH_KEY='%s'\n" "$VAR_AUTH_KEY"
            printf "PROD_SECURE_AUTH_KEY='%s'\n" "$VAR_SECURE_AUTH_KEY"
            printf "PROD_LOGGED_IN_KEY='%s'\n" "$VAR_LOGGED_IN_KEY"
            printf "PROD_NONCE_KEY='%s'\n" "$VAR_NONCE_KEY"
            printf "PROD_AUTH_SALT='%s'\n" "$VAR_AUTH_SALT"
            printf "PROD_SECURE_AUTH_SALT='%s'\n" "$VAR_SECURE_AUTH_SALT"
            printf "PROD_LOGGED_IN_SALT='%s'\n" "$VAR_LOGGED_IN_SALT"
            printf "PROD_NONCE_SALT='%s'\n" "$VAR_NONCE_SALT"
            printf "PROD_PHPMYADMIN_UPLOAD_LIMIT='%s'\n" "$VAR_PROD_PHPMYADMIN_UPLOAD_LIMIT"
            # Variables for Nginx Proxy, Let's Encrypt, and phpMyAdmin Basic Auth
            printf "PROD_DOMAIN_NAME=\"%s\"\n" "$VAR_PROD_DOMAIN_NAME"
            printf "PROD_LETSENCRYPT_EMAIL=\"%s\"\n" "$VAR_PROD_LETSENCRYPT_EMAIL"
            printf "PROD_PHPMYADMIN_AUTH_USER=\"%s\"\n" "$VAR_PROD_PHPMYADMIN_AUTH_USER"
            printf "PROD_PHPMYADMIN_AUTH_PASS=\"%s\"\n" "$VAR_PROD_PHPMYADMIN_AUTH_PASS" # Remember this should be the HASHED password
          } > .env # This creates .env in the current GITHUB_WORKSPACE root
          echo "INFO: Finished creating .env file in GITHUB_WORKSPACE. Content:"
          cat .env # For debugging, consider removing this for production secrets

      # Step 3: Deploy files to DigitalOcean Droplet using rsync over SSH
      # This action securely copies files from the runner's GITHUB_WORKSPACE to your server.
      - name: Deploy files using rsync
        uses: easingthemes/ssh-deploy@v5.0.0 # Check for the latest stable version
        with:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          ARGS: "-rlgoDzvci --delete --exclude='.git*'" # rsync arguments. Added 'c' for checksum.
          # Removed 'p' (perms) as it can cause issues if user mismatch, 'o' and 'g' are often fine with root.
          # Consider if --delete is appropriate for all scenarios (e.g., uploads folder).
          SOURCE: "./"  # Source directory (root of your repository checkout in GITHUB_WORKSPACE)
          # This will copy all files including the generated .env, wp-content/,
          # docker-compose.prod.yml, scripts/, and config/ directories.
          REMOTE_HOST: ${{ secrets.SSH_HOST }}
          REMOTE_USER: ${{ secrets.SSH_USER }} # Should be 'root' in your case
          TARGET: ${{ secrets.SERVER_PROJECT_PATH }} # Your server path: /home/wordpress-template/

      # Step 4: Execute deployment commands on the server via SSH
      # This action runs commands on your remote server after files are deployed.
      - name: Execute remote commands
        uses: appleboy/ssh-action@v1.0.3 # Or latest stable version
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }} # 'root'
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e # Exit immediately if a command exits with a non-zero status.
            
            echo "INFO: Navigating to project directory on server: ${{ secrets.SERVER_PROJECT_PATH }}"
            cd ${{ secrets.SERVER_PROJECT_PATH }}

            echo "INFO: Ensuring .env file is in place (was copied by rsync)..."
            if [ ! -f .env ]; then
              echo "ERROR: Server .env file not found at ${{ secrets.SERVER_PROJECT_PATH }}/.env after rsync!"
              exit 1
            fi
            
            echo "INFO: Pulling latest versions of base images specified in docker-compose.prod.yml..."
            docker compose -f docker-compose.prod.yml pull

            echo "INFO: Bringing up Docker containers using docker-compose.prod.yml..."
            # The --build flag is crucial here if your docker-compose.prod.yml's wordpress_prod service uses 'build: .'
            # This ensures the image is rebuilt on the server if Dockerfile or its context (scripts/) changed.
            docker compose -f docker-compose.prod.yml up -d --build --force-recreate --remove-orphans --always-recreate-deps

            echo "INFO: Waiting for WordPress container to be fully ready..."
            sleep 20 # Increased wait time for services to settle

            WORDPRESS_CONTAINER_ID=$(docker compose -f docker-compose.prod.yml ps -q wordpress_prod)
            if [ -z "$WORDPRESS_CONTAINER_ID" ]; then
              echo "ERROR: WordPress container (wordpress_prod) not found or not running!"
              docker compose -f docker-compose.prod.yml logs wordpress_prod # Show logs if it failed
              exit 1
            fi
            echo "INFO: WordPress container ID for script execution: $WORDPRESS_CONTAINER_ID"

            echo "INFO: Setting ownership of wp-content inside the WordPress container to www-data..."
            docker exec "$WORDPRESS_CONTAINER_ID" chown -R www-data:www-data /var/www/html/wp-content
            
            echo "INFO: Setting permissions for wp-content inside the WordPress container..."
            docker exec "$WORDPRESS_CONTAINER_ID" find /var/www/html/wp-content -type d -exec chmod 755 {} \;
            docker exec "$WORDPRESS_CONTAINER_ID" find /var/www/html/wp-content -type f -exec chmod 644 {} \;

            # Define the path to the script that rsync copied to the server
            COMPOSER_SCRIPT_ON_SERVER_HOST="${{ secrets.SERVER_PROJECT_PATH }}/scripts/server_composer_commands.sh"
            # Define where to copy it inside the container for execution
            COMPOSER_SCRIPT_IN_CONTAINER="/tmp/server_composer_commands.sh"

            echo "INFO: Making server_composer_commands.sh executable on server..."
            chmod +x "$COMPOSER_SCRIPT_ON_SERVER_HOST"

            echo "INFO: Copying composer command script into WordPress container..."
            docker cp "$COMPOSER_SCRIPT_ON_SERVER_HOST" "$WORDPRESS_CONTAINER_ID":"$COMPOSER_SCRIPT_IN_CONTAINER"
            
            echo "INFO: Executing composer command script inside WordPress container..."
            # Run the script using bash inside the container.
            # No -T flag needed here as appleboy/ssh-action does not allocate a PTY by default for script execution.
            docker exec "$WORDPRESS_CONTAINER_ID" bash "$COMPOSER_SCRIPT_IN_CONTAINER"
            
            echo "INFO: Removing temporary script from container..."
            docker exec "$WORDPRESS_CONTAINER_ID" rm -f "$COMPOSER_SCRIPT_IN_CONTAINER"
            
            echo "INFO: Deployment finished successfully!"