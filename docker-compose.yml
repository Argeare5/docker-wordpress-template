# docker-compose.yml
# Defines services for the LOCAL DEVELOPMENT environment.

# The 'version' attribute is obsolete with Docker Compose V2+ but harmless.
# You can remove it if you prefer.
version: '3.8'

services:
  # MySQL Database Service for local development
  db:
    image: mysql:8.0 # Using MySQL 8.0. Can be changed to other versions e.g., 5.7.
    container_name: ${PROJECT_NAME}_db # Dynamic container name from local .env
    # Command to ensure MySQL 8 uses native password authentication for broader compatibility
    # May not be strictly necessary for all WordPress versions or PHP MySQL clients.
    command: '--default-authentication-plugin=mysql_native_password'
    volumes:
      - db_data:/var/lib/mysql # Named volume for persistent database storage
    ports:
      # Expose MySQL port to the host machine (optional, for external DB tools like TablePlus, DBeaver)
      # Uses MYSQL_HOST_PORT from .env, defaults to 3306 if not set.
      - "${MYSQL_HOST_PORT:-3306}:3306"
    restart: always # Ensures the DB container restarts automatically if it stops
    environment:
      # MySQL credentials and database name, sourced from the local .env file
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    networks:
      - wordpress_network # Connects to the custom Docker network

  # WordPress Service for local development
  wordpress:
    build:
      context: . # Specifies that Docker should build an image from the Dockerfile in the current directory (project root)
      args:
        WORDPRESS_IMAGE_TAG: latest # Base WordPress image tag passed to Dockerfile (e.g., latest, php8.2-apache)
    container_name: ${PROJECT_NAME}_wordpress # Dynamic container name from local .env
    depends_on:
      - db # Ensures 'db' service starts before 'wordpress'
    ports:
      # Maps host port (from WORDPRESS_HOST_PORT in .env, default 8000) to container's port 80
      - "${WORDPRESS_HOST_PORT:-8000}:80"
    restart: always
    volumes:
      # Mounts the local ./wp-content directory into the container.
      # This allows live editing of themes and plugins from the host machine.
      - ./wp-content:/var/www/html/wp-content
      # Optional: Mount a custom php.ini for PHP settings if needed for local dev.
      # Example: - ./config/php/local-php-dev.ini:/usr/local/etc/php/conf.d/zz-local-dev.ini
    environment:
      # WordPress database connection details, sourced from local .env
      WORDPRESS_DB_HOST: db:3306 # 'db' is the service name of the MySQL container, 3306 is MySQL's port
      WORDPRESS_DB_USER: ${MYSQL_USER}
      WORDPRESS_DB_PASSWORD: ${MYSQL_PASSWORD}
      WORDPRESS_DB_NAME: ${MYSQL_DATABASE}
      WORDPRESS_TABLE_PREFIX: ${WORDPRESS_TABLE_PREFIX:-wp_} # Defaults to 'wp_' if not set in .env
      # WordPress debug settings, sourced from local .env
      WORDPRESS_DEBUG: ${WORDPRESS_DEBUG:-1} # Defaults to 1 (true) for local development
      # Optional: Set WP_DEBUG_LOG and WP_DEBUG_DISPLAY if your WordPress image/setup uses them
      # These are standard WordPress constants for debugging.
      # WORDPRESS_DEBUG_LOG: ${WORDPRESS_DEBUG_LOG:-true} # Log errors to wp-content/debug.log
      # WORDPRESS_DEBUG_DISPLAY: ${WORDPRESS_DEBUG_DISPLAY:-true} # Display errors on screen
      # WP_SITEURL and WP_HOME are set to ensure WordPress uses the correct URL for local development,
      # especially when accessed via the BrowserSync port.
      WP_HOME: http://localhost:${WORDPRESS_HOST_PORT:-8000}
      WP_SITEURL: http://localhost:${WORDPRESS_HOST_PORT:-8000}
    networks:
      - wordpress_network # Connects to the custom Docker network

  # phpMyAdmin Service for local database management
  phpmyadmin:
    image: phpmyadmin/phpmyadmin:latest # Uses the official phpMyAdmin image
    container_name: ${PROJECT_NAME}_phpmyadmin # Dynamic container name from local .env
    depends_on:
      - db # Ensures 'db' service is available before phpMyAdmin starts
    ports:
      # Maps host port (from PHPMYADMIN_HOST_PORT in .env, default 8081) to container's port 80
      - "${PHPMYADMIN_HOST_PORT:-8081}:80"
    restart: always
    environment:
      PMA_HOST: db # Tells phpMyAdmin to connect to the 'db' service (MySQL container)
      PMA_PORT: 3306 # MySQL port
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD} # Allows login to phpMyAdmin with MySQL root user (from .env)
      UPLOAD_LIMIT: 1G # Optional: Sets the maximum upload size for phpMyAdmin (e.g., for importing large SQL dumps)
    networks:
      - wordpress_network # Connects to the custom Docker network

# Named volumes for persistent data storage
volumes:
  db_data: {} # Defines the named volume 'db_data' for MySQL. Data persists even if container is removed.

# Custom Docker network for inter-service communication
networks:
  wordpress_network:
    driver: bridge # Uses the bridge driver, allowing containers to communicate by service name.